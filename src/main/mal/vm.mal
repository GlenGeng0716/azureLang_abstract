/*
 * Copyright 2019 Foreseeti AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


category System {

 
   asset Application extends Resource
   {
       | localConnect
           user info: "An attacker with low privilege access on the exectuting instance is assumed to be able to locally interact with the application."
           -> localAccess
           
        | networkRequestConnect
            user info: "The attacker has successfully sent a request to the appliaciton."
            -> networkAccess,
            (networkInterfaces.networkSecurityGroups.containedRules[InboundSecurityGroupRule] /\ portRanges.superPortRanges*.nsgRules[InboundSecurityGroupRule]).containingGroup.calledByApplication
            
        | networkRespondConnect [Exponential(0.001)]
            user info: "An attacker may be able to respond to requests submitted by an application."
            
        | authenticate
            -> localAccess,
                networkAccess
        
        & localAccess
            -> access
            
        & networkAccess
            -> access
            
        | access
            -> read,
                modify,
                deny,
                shellInstance.connect
                
        | codeExecution
            -> access,
                nonShellInstance.connect,
                executionAccount.getaccount
                
        | read
        
        | modify
        
        | deny
        
        // The following attack steps are for debugging
        | debugNSGConnect @debug
        | debugRouteConnect @debug
   }
   
   asset Instance extends Resource
   {
        let applications = (nonShellApplications \/ shellApplications)
        
        | connect
            -> highPrivilegeAccess,
                lowPrivilegeAccess
                
        & highPrivilegeAccess
            user info: "High privilege access to the instance means that the attacker can access any application and transmit from the instance."
            ->  applications().access,
                networkInterfaces.transmit,
                terminate
                
        & lowPrivilegeAccess
            user info: "Low privilege access means that the attacker can connect to any local application."
            -> applications().localConnect
         //       netwrokInterfaces.transmit
                
        | terminate
            -> applications().deny
        
   }
   
   asset VirtualMachine extends Instance
   {
        | runVirtualMachine
            -> connect
   }
   
   asset LinuxVM extends VirtualMachine
   {
        
   }
   
   asset WindowsVM extends VirtualMachine
   {
   
   }
   
   abstract asset Disk extends Resource
    user info: "In Azure, there are two types of disks that can be attached to a virtual mahince: Operating system disk and temporary disk"
   {
        | attach
                
   }
   
   asset OSDisk extends Disk
    user info: "The ram memory of OS disk has been optimized for operating systems. Generally applications and data are not stroed in the OS disk. Os disk is only for the operating system."
   {
        | attach
            -> operatingSystem.create
   }
   
   asset DataDisk extends Disk
    user info: "A data disk is a VHD that is attachde to a VM to store application data."
   {
        | attach
            -> data.read,
                data.write
        | detach
            -> data.delete
        
   }
   
   asset OperatingSystem
    user info: "Any virtual machine must have a correspondiong operating sytem."
    {
        | create
            user info: "Choose a suitable OS and the meta data is stored in the OS Disk."
    }
   
}

category Security {

    asset SSHKey
    {
        | compromised
            -> linuxVM.highPrivilegeAccess
    }
    
    asset RDPFile
    {
    
    }
    

    asset DeleteVM extends Action
    {
        | perform
            -> resources[VirtualMachine].terminate
        
        | performAction
    }
    
    asset RunVirtualMachine extends Action
    {
        | perform
            -> resources[VirtualMachine].runVirtualMachine
            
        | performAction
    }
    
    asset ConnectVirtualMachine extends Action
    {
        | perform
            -> resources[VirtualMachine].connect
        
        | performAction
    }
    
    asset TerminateVirtualMachine extends Action
    {
        | perform
            -> resources[VirtualMachine].terminate
            
        | performAction
    }
    
    asset AttachDisk extends Action
    {
        | perform
            -> resources[Disk].attach
    }
    
}

associations {
    Application [shellApplications] * <-- ShellApplicationInstance --> 0..1 [shellInstance] Instance
    Application [nonShellApplications] * <-- NonShellApplicationInstance --> 0..1 [nonShellInstance] Instance
        user info: "An instance can host several shell and non-shell applications on it."
    Application [privilegedApplication] * <-- ApplicationGetaccount --> * [executionAccount] Account
    Application [privilegedApplication] * <-- ApplicationGetUser --> * [executionUser] ADUser
    
    SSHKey [sshKey] * <-- SSHKeyAssociation --> * [linuxVM] LinuxVM
    user info: "A SSH key needs to be assigned if we use SSH connect."
    RDPFile [rdpFile] * <-- RDPFileAssociation --> * [windowsVM] WindowsVM
    user info: "A RDP file needs to be assigned if we user RDP protocal to connenct."
    
    Disk [disk] * <-- DiskVirtualMachine --> * [virtualMachine] VirtualMachine
    OSDisk [osDisk] * <-- OSDiskOperatingSystem --> * [operatingSystem] OperatingSystem
    DataDisk [dataDisk] * <-- DiskContainingData --> * [data] Data
}
