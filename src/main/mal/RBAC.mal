/*
 * Copyright 2019 Foreseeti AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


category System {

      asset RoleDefinition
        user info: "A role definition is a collection of permissions. Reference: https://docs.microsoft.com/en-us/azure/role-based-access-control/overview"
        {
            | satisfy
            user info: "The role definition has been sucessfully used by the attacker."
    }
    
      abstract asset Permission
        user info: "A permission defined in a role definition designates what actions (read, write, delete and other actions) can be taken on where."
      {
        & satisfy
            user info: "The permission has been sucessfully used by the attacker."
            
        | calledByAction
            -> satisfy
}
      asset SubscriptionPermission extends Permission
      {
  //      let applicableActions = subscription*.actionsonsubcription
}
  
      abstract asset Role
        user info: "In Role Based Access Control (RBAC) system of Azure, the role that be assigned to a security principal determines who can do what from different scopes."
    {
    
}
    
    abstract asset Action
        user info: "The action element of a permission descibes the sepecific action."
    {
        
        | performAction
            -> perform
            
        | perform @hidden
}

    asset SubscriptionReadAction extends Action
    {
        | perform
            -> scopes[Subscription].read
            
        | performAction
}

    asset CancelSubscription extends Action
            user info: "Cancels the Subcscription."
        {
            | perform
                -> subscription.cancel
                
            | performAction
                user info: "Cacel a subscription"
        
    }
    
    
    asset ReaderRole extends Role
        user info: "The ReadRole is one of the three basic roles in Azure. It only have read previleges in different scopes."
        {
        | assume
            -> gainReaderPriveliges
        
        & gainReaderPriveliges
}
   asset OwnerRole extends Role
    {
        | assume
            -> gainOwnerPriveliges
            
        & gainOwnerPriveliges
    
}

   asset ContributorRole extends Role
    {
        | assume
            -> gainContributorPriveliges
        
        & gainContributorPriveliges
}

    
    
 
}

associations {
    
    ReaderRole [reader] * <-- SubscriptionReader --> * [subscription] Subscription
    OwnerRole [owner] * <-- SubscriptionOwner --> * [subscription] Subscription
    ContributorRole [contributor] * <-- SubscriptionContributor --> * [subscription] Subscription
    
    ReaderRole [reader] * <-- ResourcegroupReader --> * [resourceGroup] ResourceGroup
    OwnerRole [owner] * <-- ResourcegroupOwner --> * [resourceGroup] ResourceGroup
    ContributorRole [contributor] * <-- ResourcegroupContributor --> * [resourceGroup] ResourceGroup
    
    Permission [permissions] * <-- PermissionAction --> * [actions] Action
        user info: "Permissions in the role definition contains actions."
    
    Subscription [subscription] 0..1 <-- SubscriptionPermssion --> * [subscriptionPermissions] SubscriptionPermission
         
    
        
    Action [subscriptionActions] * <-- ActionsOnSubscrition --> * [subscription] Subscription
        user info: "An action defined from a permission can be performed on a subscription."
    
    Action [resourcegroupActions] * <-- ActionsOnResourceGroups --> * [resourcegroup] ResourceGroup
    
    Action [resourceActions] * <-- ActionsOnResources --> * [resource] Resource
    
    Action [ActionsOnScopes] * <-- ActionsOnScopes --> * [scopes] Scope

}


